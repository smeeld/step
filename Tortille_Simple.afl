hp=Param("Hi", 30, 1, 700, 1);
lp=Param("Lo", 20, 1, 700, 1);

stop=Param("Stop", 0.005, 0, 100000, 1);
scale=Param("scale", 3, 1, 100, 1);
dates=datenum();
pos_start=0;
pos_direction=0;
pos_stop=0;
loss_count=0;
profit_count=0;
loss_sum=0;
profit_sum=0;
hour_cnt=10;
cur_close=0;
num_pos=0;
art=0;
procedure new_long(lev, hr, dy, mn, yr)
  { num_pos=1;
    pos_direction=1;
    pos_start=lev;
    pos_stop=lev-stop*lev;
    art=stop*lev;
    printf("Long =%f Stop=%f Hours=%f Days=%f  Mont=%f Years=%f \n", pos_start, pos_stop, hr, dy, mn, yr);
  };
   
procedure new_short (lev, hr, dy, mn,yr)
  { num_pos=1;
    pos_direction=-1;
    pos_start=lev;
    pos_stop=lev+stop*lev;
    art=stop*lev;
    printf("Short =%f Stop=%f Hours=%f Days=%f  Mont=%f Years=%f \n", pos_start, pos_stop, hr, dy, mn, yr);
   };

procedure check_new (mx, lw, ind, hr, dy, mn, yr)
  {
if(ind<(BarCount-1)){
  if (C[ind] > mx)
   {
     
     new_long(C[ind], hr, dy, mn, yr);
   }else{
  if (C[ind] < lw)
    {
   new_short(C[ind], hr, dy, mn, yr);
     
    };
   };
  };
};

procedure check_new_c (mx, lw, ind, hr, dy, mn, yr)
  {
if(ind<(BarCount-1)){
  if (C[ind] > mx)
   {
     
     new_long(C[ind], hr, dy, mn, yr);
   }else{
  if (C[ind] < lw)
    {
   new_short(C[ind], hr, dy, mn, yr);
     
    };
   };
  };
};

procedure proc_trade (UP, LW, upl, lwl, ind, dy, mn, yr)
  {

 res=0;
 if (pos_direction==1)
   {  stp=Max(pos_stop, lwl);
      if (pos_start < stp OR pos_start==stp)
          {  cur_close=(stp-pos_start); };
    if (L[ind] < pos_stop OR L[ind] < lwl)
     {
      pos_direction=0; cur_close=0;
      if (pos_stop > lwl){ res=pos_stop-pos_start;}else{ res=lwl-pos_start; };
     
 
    
     if( res < 0 )
       {

       printf("Loss Long =%f Stop=%f NUM_POS=%f  Days=%f  Mont=%f Years=%f \n", res, Max(pos_stop, lwl), num_pos, dy, mn, yr);
        loss_count=loss_count+1;
        loss_sum+=(res-(C[ind]/3000));
      }else{
       printf("Profit Long =%f Stop=%f Num_POs=%f Days=%f  Mont=%f Years=%f \n", res, Max( pos_stop, lwl), num_pos, dy, mn, yr);
        profit_count=profit_count+1;
        profit_sum+=(res-(C[ind]/3000));
       };
      num_pos=0;
    if ( L[ind]<LW ){ new_short(LW, hour_cnt, dy, mn, yr);  };
 
   }else{ st=H[ind]-pos_stop; if(st>art*scale){
      printf("Move Long Stop From %f To %f Day=%f Mnth=%f Year=%f \n", pos_stop, pos_stop+(st-art*scale), dy, mn, yr);
       pos_stop+=(st-art*scale); }; };
}else{
 if(pos_direction==-1){
 stp=Min(pos_stop, upl);
      if (pos_start > stp OR pos_start==stp)
          {  cur_close=(pos_start-stp); };
          
    if (H[ind] > pos_stop OR H[ind]>upl)
     {
      pos_direction=0; cur_close=0;
       if (pos_stop < upl){ res=pos_start-pos_stop; }else{ res=pos_start-upl; };
    
   if( res < 0 )
    {

       printf("Loss Short =%f Stop=%f NUM_POS=%f Days=%f  Monh=%f Years=%f \n", res, Min(pos_stop, upl), num_pos, dy, mn, yr);
        loss_count=loss_count+1;
        loss_sum+=(res-(C[ind]/3000));
      }else{
       printf("Profit Short =%f Stop=%f NUM_POS=%f Days=%f  Mont=%f Years=%f \n", res, Min( pos_stop, upl), num_pos, dy, mn, yr);
        profit_count=profit_count+1;
        profit_sum+=(res-(C[ind]/3000));
       };
      num_pos=0;
    if ( H[ind]> UP){ new_long(UP, hour_cnt, dy, mn, yr); };
  
  }else{ st=pos_stop-L[ind]; if(st > art*scale){
     printf("Move Short Stop From %f To %f Day=%f Mnth=%f Year=%f \n", pos_stop, pos_stop-(st-art*scale), dy, mn, yr);
       pos_stop-=(st-art*scale); };  };
  }else{
     if (pos_direction==0){ check_new(UP, LW, ind, hour_cnt, dy, mn,yr);  };
  };
 };
};

UP=HHV( Ref(H, -1),  hp );
LW=LLV( Ref(L, -1), hp );
lup=HHV( Ref(H, -1),  lp );
llw=LLV( Ref(L, -1), lp );
Re=MA(Close, 12);
prev_day=dates[0]%100;
for(i=0; i<BarCount; i++)
 {  dy= dates[ind]%100;
   mn=((dates[ind]-dy)%10000)/100;
    yr=(dates[ind]-mn*100-dy)/10000+1900;
      if(prev_day!=dy){
       if(pos_direction==0){ 
   proc_trade(UP[i], LW[i], lup[i], llw[i], i, dy, mn, yr);
   Re[i]=profit_sum+loss_sum+cur_close;
  
 };
printf("Ok Loss Amount=%f Prof Amount=%f Loss Sum=%f Profit Sum=%f\n", loss_count, profit_count, loss_sum, profit_sum);
Plot(Re, "Tortille_Simple", colorGreen, styleLine);
 
