Settings={
Name="Donchian_Trayling_INC",
period_up=400,
period_lw=400,
stop=3,
inc_scale=1,
 line=
{
{
    Name="line1",
   Type=TYPE_LINE,
   Color=RGB(0,255,0)
  },
{
    Name="line2",
   Type=TYPE_LINE,
   Color=RGB(0,255,0)
  },
 {
    Name="line11",
   Type=TYPE_LINE,
   Color=RGB(0,0,255)
  },
{
    Name="line21",
   Type=TYPE_LINE,
   Color=RGB(0,0,255)
  },
{
    Name="line3",
   Type=TYPE_POINT,
   Color=RGB(0,255,0)
  },
{
    Name="line4",
   Type=TYPE_POINT,
   Color=RGB(0,0,255)
  },
{
    Name="line5",
   Type=TYPE_TRIANGLE_UP,
   Color=RGB(0,255,0)
  },
{
    Name="line6",
   Type=TYPE_TRIANGLE_DOWN,
   Color=RGB(255,0,0)
  },
 {
    Name="line7",
   Type=TYPE_TRIANGLE_UP,
   Color=RGB(255,255,0)
  },
{
    Name="line8",
   Type=TYPE_TRIANGLE_DOWN,
   Color=RGB(255,0,255)
  }
 }
}

pos_start={}
pos_direction=0
pos_stop=0
pos_art=0
statistic={ loss_count=0, profit_count=0, loss_sum=0, profit_sum=0 }
start=0
stop_up=nil
stop_dwn=nil
up=nil
dwn=nil
lup=nil
ldwn=nil
tr_up=nil
tr_dwn=nil
st_up=nil
st_dwn=nil
cnt=0
cnt_up=0
cnt_lw=0
prev=0
cup={}
clw={}

function new_long (lev, ind)
    pos_direction=1
   cnt=cnt+1
   pos_art=lev*Settings.stop
    pos_start[cnt-1]=lev
    if cnt==1 then pos_stop=lev-pos_art else pos_stop=pos_stop+pos_art*Settings.inc_scale end
    tr_up=L(ind)
    stop_up=pos_stop
   end

function new_short (lev, ind)
    pos_direction=-1
   cnt=cnt+1
   pos_art=lev*Settings.stop
    pos_start[cnt-1]=lev
    if cnt==1 then pos_stop=lev+art else pos_stop=pos_stop-pos_art*Settings.inc_scale end
    tr_dwn=H(ind)
    stop_dwn=pos_stop
   end
   

function check_new (max, min, ind)
  
 
if T(ind).hour==10 then
   
  if C(ind) > max then
     new_long(C(ind), ind)
     return
   end
 
  if C(ind) < min then
    new_short(C(ind), ind)
   end
 else

  if H(ind) > max then
     new_long(max, ind)
     return
   end
 
  if L(ind) < min then
    new_short(min, ind)
   end
 end
end

function proc_trade (up, lw, upl, lwl, ind)
  

 if pos_direction==1 then
   if L(ind) < lwl or L(ind) < pos_stop then
    pos_direction=0
    cnt=0
    stop_up=nil
    st_dwn=H(ind)
    check_new(up, lw, ind)
   else
      if H(ind) > ( pos_start[cnt-1]+Settings.inc_scale*pos_art) then
       if T(ind).hour==10 then
        new_long(C(ind), ind)
       else
        new_long(pos_start[cnt-1]+Settings.inc_scale*pos_art, ind)
       end
      end
   end
  return
 end

if pos_direction==-1 then
   if H(ind) > upl or H(ind) > pos_stop then
    pos_direction=0
    cnt=0
    stop_dwn=nil
    st_up=L(ind)
    check_new(up, lw, ind)
   else
      if L(ind) < ( pos_start[cnt-1]-Settings.inc_scale*pos_art) then
       if T(ind).hour==10 then
        new_short(C(ind), ind)
       else
        new_short(pos_start[cnt-1]+Settings.inc_scale*pos_art, ind)
      end
     end
    end
  return
 end

if pos_direction==0 then
  check_new(up, lw, ind)
 end

end

  
function Init() 

  for i=0, 400, 1 do
   cup[i]=0
   clw[i]=0
  end


 
  return 10 end

function OnCalculate(ind)
 
if start==0 then
 start=1
 for i=0, 400, 1 do
   cup[i]=0
   clw[i]=0
  end
 end

if ind < prev then prev=0 start=0
  else
if prev<ind then
    prev=ind
    tr_up=nil
    tr_dwn=nil
    st_up=nil
    st_dwn=nil
    max=0
    min=1000000
    cup[cnt_up]=H(ind-1)
    clw[cnt_lw]=H(ind-1)
    cup[Settings.period_up+cnt_up]=L(ind-1)
    clw[Settings.period_lw+cnt_lw]=L(ind-1)
    cnt_up=cnt_up+1
    cnt_lw=cnt_lw+1
     if cnt_up==Settings.period_up then cnt_up=0 end
     if cnt_lw==Settings.period_lw then cnt_lw=0 end
  for i=0, Settings.period_up-1, 1 do
   if cup[i] > max then max=cup[i] end
   if cup[i+Settings.period_up]< min then min=cup[i+Settings.period_up] end
  end
  up=max
  dwn=min
  max=0
  min=1000000
  for i=0, Settings.period_lw-1, 1 do
   if clw[i] > max then max=clw[i] end
   if clw[i+Settings.period_lw]< min then min=clw[i+Settings.period_lw] end
  end
  lup=max
  ldwn=min
end
proc_trade(up, dwn, lup, ldwn ind)
end

 return up, dwn, lup, ldwn, stop_up, stop_dwn, tr_up, tr_dwn, st_up, st_dwn
 end
